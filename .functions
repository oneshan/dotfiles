###############################################################################
# File search                                                                 #
###############################################################################
function fname() { find . -name "*$@*"; }
function fregex() { find . -regextype posix-egrep -regex "*$@*"; }
function firegex() { find . -regextype posix-egrep -iregex "*$@*"; }
function finame() { find . -iname "*$@*"; }

###############################################################################
# Get colors in manual pages                                                  # 
###############################################################################
function man() {
   env \
      LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
      LESS_TERMCAP_md="$(printf '\e[1;31m')" \
      LESS_TERMCAP_me="$(printf '\e[0m')" \
      LESS_TERMCAP_se="$(printf '\e[0m')" \
      LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
      LESS_TERMCAP_ue="$(printf '\e[0m')" \
      LESS_TERMCAP_us="$(printf '\e[1;32m')" \
      man "$@"
}



###############################################################################
# Remove all .pyc from a project | Usage: pyclean                             #
###############################################################################
function pyclean () {
   find . -type f -name "*.py[co]" -delete
   find . -type d -name "__pycache__" -delete
}

###############################################################################
# Extract file | Usage: extract <filename>                                    #
###############################################################################
function extract() {
   if [ -f $1 ] ; then
      tar xvf $1
   else
      echo "'$1' is not a valid file!"
   fi
}

###############################################################################
# Syntax-highlight JSON strings or files | Usage: json '<json string>'        #
###############################################################################
function json() {
   if [ -t 0 ]; then # argument
      python -mjson.tool <<< "$*" | pygmentize -l javascript
   else # pipe
      python -mjson.tool | pygmentize -l javascript
   fi
}


###############################################################################
# Bash bookmark manager | Usage: bm [-c|-g|-d|-l] <bookmark>                  #
# Credit goes to getmizanur at Stackoverflow                                  #
###############################################################################
function bm() {
   bookmark_storage="${HOME}/.bookmarks"

   USAGE="Usage: bm [-c|-g|-d|-l] [bookmark]
      bm -c <bookmark>
      Bookmark the current directory under <bookmark>
      bm -g <bookmark>
      Go to the directory saved under <boomark>
      bm -d <boomark>
      Delete directory under <bookmark>
   " ;

   if  [ ! -e ${bookmark_storage} ] ; then
      mkdir ${bookmark_storage}
   fi

   case $1 in
      # create bookmark
      -c) shift
         if [ ! -f ${bookmark_storage}/$1 ] ; then
            echo "$(pwd)" > ${bookmark_storage}/"$1" ;
         else
            echo "Try again! Looks like there is already a bookmark '$1'"
         fi
         ;;
  
      # goto bookmark
      -g) shift
         if [ -f ${bookmark_storage}/${1} ] ; then
            cd $(cat ${bookmark_storage}/${1})
         else
            echo "Mmm...looks like your bookmark has spontaneously combusted. What I mean to say is that your bookmark does not exist." ;
         fi
         ;;

      # delete bookmark
      -d) shift
         if [ -f ${bookmark_storage}/$1 ] ; then
            rm ${bookmark_storage}/"$1" ;
         else
            echo "Oops, forgot to specify the bookmark" ;
         fi
         ;;

      # list bookmarks
      -l) shift
         for bookmark in ${bookmark_storage}/*
         do
            echo  "$(basename ${bookmark}) -> $(cat ${bookmark})" ;
         done
      ;;

      *) echo "$USAGE" ;
   ;;
   esac
}


###############################################################################
# Open repo on github/bitbucket in browser | Usage: repo                      #
# Modified version of https://github.com/zeke/ghwd                            #
###############################################################################

function repo() {
   # Figure out github repo base URL
   local base_url
   base_url=$(git config --get remote.origin.url)
   base_url=${base_url%\.git} # remove .git from end of string

   # Fix git@github.com: URLs
   base_url=${base_url//git@github\.com:/https:\/\/github\.com\/}

   # Fix git://github.com URLS
   base_url=${base_url//git:\/\/github\.com/https:\/\/github\.com\/}

   # Fix git@bitbucket.org: URLs
   base_url=${base_url//git@bitbucket.org:/https:\/\/bitbucket\.org\/}

   # Fix git@gitlab.com: URLs
   base_url=${base_url//git@gitlab\.com:/https:\/\/gitlab\.com\/}

   # Validate that this folder is a git folder
   if ! git branch 2>/dev/null 1>&2 ; then
      echo "Not a git repo!"
      exit $?
   fi

   # Find current directory relative to .git parent
   full_path=$(pwd)
   git_base_path=$(cd "./$(git rev-parse --show-cdup)" || exit 1; pwd)
   relative_path=${full_path#$git_base_path} # remove leading git_base_path from working directory

   # If filename argument is present, append it
   if [ "$1" ]; then
      relative_path="$relative_path/$1"
   fi

   # Figure out current git branch
   # git_where=$(command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
   git_where=$(command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null

   # Remove cruft from branchname
   branch=${git_where#refs\/heads\/}

   [[ $base_url == *bitbucket* ]] && tree="src" || tree="tree"
   url="$base_url/$tree/$branch$relative_path"

   echo "Calling $(type open) for $url"

   open "$url" &> /dev/null || (echo "Using $(type open) to open URL failed." && exit 1);
}

###############################################################################
# Lookup weather | Usage: meteo [location]                                    #
###############################################################################

function meteo() {
   local LOCALE=`echo ${LANG:-en} | cut -c1-2`
   if [ $# -eq 0 ]; then
      local LOCATION=`curl -s ipinfo.io/loc`
   else
      local LOCATION=$1
   fi
   curl -s "$LOCALE.wttr.in/$LOCATION"
}

###############################################################################
# Search Wikipedia | Usage: wiki <keyword>                                    #
###############################################################################

wiki() {
   search=""
   for term in $*; do
      search="$search%20$term"
   done
   open "http://en.wikipedia.org/w/index.php?search=$search"
}
